name: UploadThing API Test

on:
  push:
    branches: [main, pdf-size-fix]
  pull_request:
    branches: [main]

jobs:
  test-uploadthing-json:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build application
        run: npm run build
        env:
          UPLOADTHING_TOKEN: ${{ secrets.UPLOADTHING_TOKEN || 'test-token' }}
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL || 'https://test.supabase.co' }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY || 'test-key' }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY || 'test-role-key' }}
      
      - name: Start server in background
        run: |
          npm run start &
          echo $! > server.pid
          sleep 10
        env:
          UPLOADTHING_TOKEN: ${{ secrets.UPLOADTHING_TOKEN || 'test-token' }}
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL || 'https://test.supabase.co' }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY || 'test-key' }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY || 'test-role-key' }}
      
      - name: Test UploadThing API JSON Response
        run: |
          echo "Testing UploadThing API endpoint..."
          
          # Test valid request
          response=$(curl -s -X POST http://localhost:3000/api/uploadthing?actionType=upload&slug=pdfUploader \
            -H "Content-Type: application/json" \
            -d '{"test": true}')
          
          echo "Response: $response"
          
          # Verify JSON is parseable
          echo "$response" | jq . > /dev/null || (echo "Failed to parse JSON response" && exit 1)
          
          # Verify response structure
          echo "$response" | jq -e '.success != null and .documentId != null' > /dev/null || \
            (echo "Response missing required fields" && exit 1)
          
          # Test error cases
          echo "Testing error cases..."
          
          # Wrong method
          curl -s -X GET http://localhost:3000/api/uploadthing?actionType=upload&slug=pdfUploader | \
            jq -e '.success == false and .error != null' > /dev/null || \
            (echo "GET request did not return expected error" && exit 1)
          
          # Invalid actionType
          curl -s -X POST http://localhost:3000/api/uploadthing?actionType=invalid&slug=pdfUploader | \
            jq -e '.success == false and .error != null' > /dev/null || \
            (echo "Invalid actionType did not return expected error" && exit 1)
          
          echo "All tests passed!"
      
      - name: Run unit tests
        run: npm test -- src/tests/api/uploadthing.test.ts
      
      - name: Stop server
        if: always()
        run: |
          if [ -f server.pid ]; then
            kill $(cat server.pid) || true
            rm server.pid
          fi